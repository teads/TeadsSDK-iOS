// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TeadsSDK
import ARKit
import AVFoundation
import AVKit
import AdSupport
import AppTrackingTransparency
import CoreGraphics
import CoreTelephony
import Foundation
import JavaScriptCore
import OMSDK_Teadstv
import QuickLook
import SafariServices
import Swift
import SwiftUI
import SystemConfiguration
@_exported import TeadsSDK
import UIKit
import WebKit
import _Concurrency
extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func bind(component: TeadsSDK.CommonComponent?)
}
@_hasMissingDesignatedInitializers @objc final public class TeadsAdRatio : ObjectiveC.NSObject {
  @objc public static let zero: TeadsSDK.TeadsAdRatio
  @objc public static let `default`: TeadsSDK.TeadsAdRatio
  @objc(calculateHeightForWidth:) final public func calculateHeight(for width: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @objc final public func value(for width: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class AdChoicesComponent : TeadsSDK.OverlayComponent {
  final public let clickThroughUrl: Foundation.URL
  @objc deinit
}
@objc public protocol TeadsNativeAdPlacementDelegate : TeadsSDK.TeadsAdPlacementDelegate {
  @objc func didReceiveAd(ad: TeadsSDK.TeadsNativeAd)
}
@_hasMissingDesignatedInitializers @objc final public class TeadsNativeAdPlacement : TeadsSDK.TeadsAdPlacement {
  @objc weak final public var delegate: TeadsSDK.TeadsNativeAdPlacementDelegate? {
    @objc get
    @objc set
  }
  @discardableResult
  @objc final public func requestAd(requestSettings: TeadsSDK.TeadsNativeAdRequestSettings) -> Foundation.UUID
  @objc deinit
}
@usableFromInline
internal protocol AnyEncodableProtocol {
  var value: Any { get }
  init<T>(_ value: T?)
}
@_inheritsConvenienceInitializers @objc final public class TeadsAdapterSettings : ObjectiveC.NSObject, Swift.Codable {
  public static let integrationAdmob: Swift.String
  @available(*, deprecated, message: "Since March 31, 2022 Mopub integration has sunset in favor of AppLovin")
  public static let integrationMopub: Swift.String
  public static let integrationApplovin: Swift.String
  public static let integrationSAS: Swift.String
  public static let integrationTypeKey: Swift.String
  public static let integrationVersionKey: Swift.String
  final public var hasSubscribedToAdResizing: Swift.Bool {
    get
  }
  final public let adRequestSettings: TeadsSDK.TeadsAdRequestSettings
  final public let adPlacementSettings: TeadsSDK.TeadsAdPlacementSettings
  @objc final public var mediaScale: TeadsSDK.MediaScale {
    @objc get
  }
  public typealias BuildTeadsAdapterSettings = (TeadsSDK.TeadsAdapterSettings) -> Swift.Void
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc public init(build: (TeadsSDK.TeadsAdapterSettings) -> Swift.Void)
  @objc final public func disableCrashMonitoring()
  @objc final public func disableTeadsAudioSessionManagement()
  @available(*, deprecated, message: "TeadsSDK does not record location.")
  @objc final public func disableLocation()
  @available(*, deprecated, message: "Won't be used in any newer SDK versions.")
  @objc final public func enableLightEndScreen()
  @available(*, deprecated, message: "This is not used anymore and will be removed in a future version of the SDK")
  @objc final public func disableMediaPreload()
  @objc final public func userConsent(subjectToGDPR: Swift.String, consent: Swift.String, tcfVersion: TeadsSDK.TCFVersion = .v2, cmpSdkID: Swift.Int = 0)
  @objc final public func setUsPrivacy(consent: Swift.String)
  @objc final public func disableBatteryMonitoring()
  @objc final public func addExtras(_ value: Swift.String, for key: Swift.String)
  @objc final public func enableDebug()
  @objc final public func enableValidationMode()
  @objc final public func pageUrl(_ urlString: Swift.String)
  @objc final public func setMediaScale(_ mediaScale: TeadsSDK.MediaScale)
  @available(*, deprecated, renamed: "registerAdView(_:delegate:)")
  @objc final public func subscribeAdResizeDelegate(_ delegate: TeadsSDK.TeadsMediatedAdViewDelegate, forAdView adView: UIKit.UIView) throws
  @objc final public func registerAdView(_ adView: UIKit.UIView, delegate: TeadsSDK.TeadsMediatedAdViewDelegate) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc extension TeadsSDK.TeadsAdapterSettings {
  @objc final public func toDictionary() throws -> [Swift.AnyHashable : Any]
  @objc final public class func instance(from dictionary: [Swift.AnyHashable : Any]) throws -> TeadsSDK.TeadsAdapterSettings
}
@_inheritsConvenienceInitializers @objc final public class Teads : ObjectiveC.NSObject {
  @objc public static let sdkVersion: Swift.String
  final public class func createNativePlacement(pid: Swift.Int, settings: TeadsSDK.TeadsAdPlacementSettings = TeadsAdPlacementSettings(), delegate: TeadsSDK.TeadsNativeAdPlacementDelegate? = nil) -> TeadsSDK.TeadsNativeAdPlacement?
  @objc final public class func createInReadPlacement(pid: Swift.Int, settings: TeadsSDK.TeadsAdPlacementSettings = TeadsAdPlacementSettings(), delegate: TeadsSDK.TeadsInReadAdPlacementDelegate? = nil) -> TeadsSDK.TeadsInReadAdPlacement?
  @objc override dynamic public init()
  @objc deinit
}
extension TeadsSDK.Teads {
  @objc final public class func configure()
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func bind(component: TeadsSDK.CommonComponent?)
}
@objc public enum MediaScale : Swift.Int, Swift.Codable {
  case scaleAspectFill = 0
  case scaleAspectFit = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class TeadsMediaView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var placeholderImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) final public var mediaScale: TeadsSDK.MediaScale {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public init(videoComponent: TeadsSDK.VideoComponent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func bind(component: TeadsSDK.CommonComponent?)
  @objc deinit
}
@usableFromInline
internal protocol AnyDecodableProtocol {
  var value: Any { get }
  init<T>(_ value: T?)
}
@objc public protocol TeadsInReadAdPlacementDelegate : TeadsSDK.TeadsAdPlacementDelegate {
  @objc func didReceiveAd(ad: TeadsSDK.TeadsInReadAd, adRatio: TeadsSDK.TeadsAdRatio)
  @objc func didUpdateRatio(ad: TeadsSDK.TeadsInReadAd, adRatio: TeadsSDK.TeadsAdRatio)
}
@_hasMissingDesignatedInitializers @objc final public class TeadsInReadAdPlacement : TeadsSDK.TeadsAdPlacement {
  @objc weak final public var delegate: TeadsSDK.TeadsInReadAdPlacementDelegate? {
    @objc get
    @objc set
  }
  @discardableResult
  @objc final public func requestAd(requestSettings: TeadsSDK.TeadsInReadAdRequestSettings) -> Foundation.UUID
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class TeadsNativeAd : TeadsSDK.TeadsAd {
  @objc final public var title: TeadsSDK.CommonComponent? {
    @objc get
  }
  @objc final public var content: TeadsSDK.CommonComponent? {
    @objc get
  }
  @objc final public var image: TeadsSDK.ImageComponent? {
    @objc get
  }
  @objc final public var icon: TeadsSDK.ImageComponent? {
    @objc get
  }
  @objc final public var sponsored: TeadsSDK.CommonComponent? {
    @objc get
  }
  @objc final public var callToAction: TeadsSDK.CommonComponent? {
    @objc get
  }
  @objc final public var video: TeadsSDK.VideoComponent? {
    @objc get
  }
  @objc final public var rating: TeadsSDK.CommonComponent? {
    @objc get
  }
  @objc final public var price: TeadsSDK.CommonComponent? {
    @objc get
  }
  @objc final public var adChoices: TeadsSDK.AdChoicesComponent? {
    @objc get
  }
  @objc final public func register(containerView: UIKit.UIView)
  final public func performTap()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) final public class TeadsAdOpportunityTrackerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public func removeFromSuperview()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class TeadsAdRequestSettings : ObjectiveC.NSObject, Swift.Codable {
  @objc public func enableValidationMode()
  @objc public func pageUrl(_ rawUrlString: Swift.String)
  @objc public func addExtras(_ value: Swift.String, for key: Swift.String)
  public typealias BuildTeadsAdRequestSettings = (TeadsSDK.TeadsAdRequestSettings) -> Swift.Void
  @objc public init(build: (TeadsSDK.TeadsAdRequestSettings) -> Swift.Void)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public typealias TeadsNativeAdRequestSettings = TeadsSDK.TeadsAdRequestSettings
public typealias TeadsInReadAdRequestSettings = TeadsSDK.TeadsAdRequestSettings
@objc public enum TCFVersion : Swift.Int, Swift.Codable {
  @available(*, deprecated, message: "no longer supported since 15 August 2020")
  case v1 = 1
  case v2 = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func bind(component: TeadsSDK.CommonComponent?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ImageComponent : TeadsSDK.CommonComponent {
  final public let url: Foundation.URL
  @objc final public func loadImage(async: Swift.Bool = true, success: ((UIKit.UIImage) -> Swift.Void)?, failure: ((Swift.Error) -> Swift.Void)? = nil)
  @objc final public var image: UIKit.UIImage? {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class TeadsAdView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) final public class TeadsAdChoicesView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public init(binding component: TeadsSDK.OverlayComponent? = nil)
  @objc deinit
}
@objc public protocol TeadsLogMessageDelegate {
  @objc optional func didLogMessage(message: Swift.String)
}
@objc public protocol TeadsAdPlacementDelegate : TeadsSDK.TeadsLogMessageDelegate {
  @objc func didFailToReceiveAd(reason: TeadsSDK.AdFailReason)
  @objc func adOpportunityTrackerView(trackerView: TeadsSDK.TeadsAdOpportunityTrackerView)
}
@_hasMissingDesignatedInitializers @objc public class TeadsAdPlacement : ObjectiveC.NSObject {
  final public let pid: Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class TeadsAdPlacementSettings : ObjectiveC.NSObject, Swift.Codable {
  public static let pluginKey: Swift.String
  public static let pluginFlutter: Swift.String
  public static let pluginReactNative: Swift.String
  public static let pluginVersionKey: Swift.String
  @objc final public func disableCrashMonitoring()
  @objc final public func disableTeadsAudioSessionManagement()
  @objc final public func enableDebug()
  @available(*, deprecated, message: "TeadsSDK does not record location.")
  @objc final public func disableLocation()
  @available(*, deprecated, message: "Won't be used in any newer SDK versions.")
  @objc final public func enableLightEndScreen()
  @available(*, deprecated, message: "This is not used anymore and will be removed in a future version of the SDK")
  @objc final public func disableMediaPreload()
  @objc final public func userConsent(subjectToGDPR: Swift.String, consent: Swift.String, tcfVersion: TeadsSDK.TCFVersion = .v2, cmpSdkID: Swift.Int = 0)
  @objc final public func setUsPrivacy(consent: Swift.String)
  @objc final public func disableBatteryMonitoring()
  @objc final public func addExtras(_ value: Swift.String, for key: Swift.String)
  public typealias BuildTeadsAdSettings = (TeadsSDK.TeadsAdPlacementSettings) -> Swift.Void
  @objc public init(build: (TeadsSDK.TeadsAdPlacementSettings) -> Swift.Void)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func bind(component: TeadsSDK.CommonComponent?)
}
@_hasMissingDesignatedInitializers @objc final public class TeadsInReadAd : TeadsSDK.TeadsAd {
  @objc deinit
}
extension TeadsSDK.TeadsInReadAd {
  @objc final public var adRatio: TeadsSDK.TeadsAdRatio {
    @objc get
  }
}
@objc public protocol TeadsAdDelegate {
  @objc func willPresentModalView(ad: TeadsSDK.TeadsAd) -> UIKit.UIViewController?
  @objc optional func didCatchError(ad: TeadsSDK.TeadsAd, error: Swift.Error)
  @objc optional func didClose(ad: TeadsSDK.TeadsAd)
  @objc optional func didRecordImpression(ad: TeadsSDK.TeadsAd)
  @objc optional func didRecordClick(ad: TeadsSDK.TeadsAd)
  @objc optional func didExpandedToFullscreen(ad: TeadsSDK.TeadsAd)
  @objc optional func didCollapsedFromFullscreen(ad: TeadsSDK.TeadsAd)
}
@objc public protocol TeadsPlaybackDelegate {
  @objc optional func adStartPlayingAudio(_ ad: TeadsSDK.TeadsAd)
  @objc optional func adStopPlayingAudio(_ ad: TeadsSDK.TeadsAd)
  @objc optional func didPlay(_ ad: TeadsSDK.TeadsAd)
  @objc optional func didPause(_ ad: TeadsSDK.TeadsAd)
  @objc optional func didComplete(_ ad: TeadsSDK.TeadsAd)
}
@available(*, unavailable, renamed: "TeadsPlaybackDelegate", message: "Use TeadsPlaybackDelegate instead")
@objc public protocol TeadsSoundDelegate {
  @objc func adStartPlayingAudio(_ ad: TeadsSDK.TeadsAd)
  @objc func adStopPlayingAudio(_ ad: TeadsSDK.TeadsAd)
}
@_hasMissingDesignatedInitializers @objc public class TeadsAd : ObjectiveC.NSObject {
  @objc weak public var delegate: TeadsSDK.TeadsAdDelegate? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "playbackDelegate", message: "Use playbackDelegate instead")
  @objc weak public var soundDelegate: TeadsSDK.TeadsPlaybackDelegate?
  @objc weak public var playbackDelegate: TeadsSDK.TeadsPlaybackDelegate? {
    @objc get
    @objc set
  }
  @objc final public let requestIdentifier: Foundation.UUID
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TeadsNativeAdView : TeadsSDK.TeadsAdView {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var contentLabel: UIKit.UILabel?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var mediaView: TeadsSDK.TeadsMediaView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var iconImageView: UIKit.UIImageView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var advertiserLabel: UIKit.UILabel?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var callToActionButton: UIKit.UIButton?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var ratingView: UIKit.UIView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var priceLabel: UIKit.UILabel?
  @objc @_Concurrency.MainActor(unsafe) public func bind(_ ad: TeadsSDK.TeadsNativeAd)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class OverlayComponent : TeadsSDK.CommonComponent {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class ContainerComponent : TeadsSDK.CommonComponent {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class CommonComponent : ObjectiveC.NSObject {
  @objc deinit
  @objc public func didTapView()
}
extension TeadsSDK.CommonComponent {
  public var text: Swift.String? {
    get
  }
}
@objc public protocol TeadsMediatedAdViewDelegate {
  @objc func didUpdateRatio(_ adView: UIKit.UIView, adRatio: TeadsSDK.TeadsAdRatio)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) final public class TeadsInReadAdView : TeadsSDK.TeadsAdView {
  @objc @_Concurrency.MainActor(unsafe) final public func bind(_ ad: TeadsSDK.TeadsInReadAd)
  @_Concurrency.MainActor(unsafe) public init(bind ad: TeadsSDK.TeadsInReadAd, frame: CoreGraphics.CGRect = .zero)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VideoComponent : TeadsSDK.CommonComponent {
  @objc public var contentAspectRatio: CoreGraphics.CGFloat {
    get
  }
  @objc deinit
}
@objc public enum AdErrorCode : Swift.Int {
  case errorNoSlot = 1
  case errorNetwork = 2
  case errorNotFilled = 3
  case errorBadResponse = 4
  case errorVastError = 5
  case errorUserIdMissing = 6
  case errorInternal = 7
  case disabledApp = 8
  case errorAdRequest = 9
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc final public class AdFailReason : ObjectiveC.NSObject {
  @objc final public let code: TeadsSDK.AdErrorCode
  @objc final public var requestIdentifier: Foundation.UUID! {
    get
  }
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension TeadsSDK.AdFailReason : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  final public var errorCode: Swift.Int {
    get
  }
  final public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
extension TeadsSDK.MediaScale : Swift.Equatable {}
extension TeadsSDK.MediaScale : Swift.Hashable {}
extension TeadsSDK.MediaScale : Swift.RawRepresentable {}
extension TeadsSDK.TCFVersion : Swift.Equatable {}
extension TeadsSDK.TCFVersion : Swift.Hashable {}
extension TeadsSDK.TCFVersion : Swift.RawRepresentable {}
extension TeadsSDK.AdErrorCode : Swift.Equatable {}
extension TeadsSDK.AdErrorCode : Swift.Hashable {}
extension TeadsSDK.AdErrorCode : Swift.RawRepresentable {}
